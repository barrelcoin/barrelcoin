#!/usr/bin/env node

const BlockChain = require('./src/blockchain')
const Identity = require('./src/identity')
const Network = require('./src/network')
const Miner = require('./src/miner')
const Server = require('./src/server')
const fs = require('fs')

const crypto = require('crypto')
const stringify = require('json-stable-stringify');
let options = {
    port: 1960,
    initial_connections: [],
    server: false,
    identity: 'default',    
    MAX_PEER_COUNT: 1024,
    VERSION_STRING: "1.0.0"
}

process.argv.forEach((val) => {
    if (val.match(/-port=[0-9]+/)) {
        options.port = parseInt(val.split('=')[1])
    } else if (val.match(/-connect=[0-9.:]*/)) {
        options.initial_connections.push(val.split('=')[1])
    } else if (val.match(/-identity=[a-z]+/)) {
        options.identity = val.split('=')[1]
    } else if (val.match(/-server/)) {
        options.server = true;
    }
});

const identity = new Identity(`./.identities/${options.identity}`);
const db = new BlockChain(`./.identities/${options.identity}`);
const network = new Network({port: options.port});

// Read through known peers and connect to them
if (!fs.existsSync(this.dir)) {
    fs.writeFileSync(`./.identities/${options.identity}/knownpeers.txt`, "");
}
const known_peers = fs.readFileSync(`./.identities/${options.identity}/knownpeers.txt`, {encoding: 'utf8', flag: 'r'}).split('\n').filter(p => p.length > 0);

known_peers.forEach((peer) => network.connect(peer));

options.initial_connections.forEach((peer) => network.connect(peer));
console.log(identity.publicKey());

network.on('connect', (peer) => {

    network.send(peer, {
        kind: "handshake",
        version: options.VERSION_STRING,
        port: options.port,
    });
    
    network.send(peer, {
        kind: "peer-discovery-request"
    })

    network.send(peer, {
        kind: "blocks-request",
        start_hash: db.getLatestHash()
    })

});

network.on('handshake', (message, peer) => {
    
    if (message.version != options.VERSION_STRING) {
        network.send(peer, {
            kind: "error",
            message: "incompatible version"
        });
        network.destroy_connection(peer);
        return;
    }

    // check if the peer accepts incoming connections
    if (message.port) {
        peer.data.port = message.port;
    }

    const addr = peer.remoteAddress;
    const port = peer.data.port ? peer.data.port: peer.remotePort;
    console.log(`[+] ${addr}:${port}`)
    fs.appendFile('./.identities/default/known_peers.txt', `\n${addr}:${port}`, function (err) {
      if (err) throw err;
    });
})

network.on('disconnect', (peer) => {
    const addr = peer.remoteAddress;
    const port = peer.data.port ? peer.data.port: peer.remotePort;
    console.log(`[-] ${addr}:${port}`)
})

network.on('peer-discovery-request', (message, peer) => {

    // Get a list of all connected nodes that have a known listening port.
    const peers = network.nodes.filter(n => n.data.port)
                               .map(n => `${n.remoteAddress}:${n.data.port}`);
    
    // Send a response to the peer with a list of address strings.
    network.send(peer, {
        kind: "peer-discovery-response",
        peers: peers
    })
})

network.on('peer-discovery-response', (message) => {

    // In order to avoid multiple redundent connections between nodes,
    // build a list of currently connected peer address strings. Before
    // connecting to a node, we will check that we are not already
    // connected.
    const peer_addr_strings = network.nodes.map(n => {
        const addr = n.remoteAddress;
        const port = n.data.port ? n.data.port: n.remotePort;
        return `${addr}:${port}`;
    });

    // Iterate through all peer address strings obtained from message.
    // Initiate a connection with the peer if not already connected.
    message.peers.forEach((peer) => {  
        if (peer_addr_strings.includes(peer)) return;
        if (peer == `127.0.0.1:${options.port}`) return;
        network.connect(peer)
    });

});


network.on('blocks-request', (message, peer) => {
    const index = db.longest_chain.indexOf(message.start_hash);
    if (index == -1) {
        network.send(peer, {
            kind: "blocks-response",
            start_hash: message.start_hash,
            blocks: null
        })
    } else {
        const blocks = [];
        for (let i = index + 1; i < db.longest_chain.length; i++) {
            const hash = db.longest_chain[i];
            blocks.push(JSON.parse(db.blocks_by_hash[hash].string));
        }
        network.send(peer, {
            kind: "blocks-response",
            start_hash: message.start_hash,
            blocks: blocks
        })
    }
})

network.on('blocks-response', (message, peer) => {
    if (message.blocks == null) {
        network.send(peer, {
            kind: "blocks-request",
            start_hash: db.longest_chain[0]
        })
    } else {
        message.blocks.forEach(block => {
            db.addBlock(block);
        })
    }
});
    
network.on('block', (message) => {
    db.addBlock(message.block);
});

network.on('error', (message) => {
    console.error(`error: ${message.message}`);
});


/**
 * @brief Create a new Miner thread that "mines" for cryptocurrency. 
 */
const miner = new Miner(nextBlock, (block) => {

    network.broadcast({
        kind: "block",
        block: block,
    });

    db.addBlock(block);
})


function nextBlock() {

    const coinbase_transaction = {
        sender: '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        recipient: identity.publicKey(),
        value: 64,
        nonce: db.longest_chain.length,
    };

    const transaction_hash = crypto.createHash('sha256').update(stringify(coinbase_transaction)).digest('hex');

    return {
        header: {
            "prev_block": db.getLatestHash(),
            "timestamp": Math.floor(new Date().getTime() / 1000),
            "difficulty": 5,
            "nonce": 0,
            "merkle_root": BlockChain.computeMerkleRoot([transaction_hash])
        }, 
        transactions: [coinbase_transaction]
    }
}

/**
 * As soon as our blockchain is extended, the current block is no longer valid.
 * We inform our mining thread to restart its calculations using the newly
 * updated ledger.
 */
db.on('extended', () => {
     miner.mineBlock();
});

/**
 * We should get started mining right away!
 */
miner.mineBlock();

if (options.server) {
    const server = new Server(db);
    server.start();
}

